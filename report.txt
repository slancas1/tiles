// Brianna Hoelting and Sophie Lancaster
// Final Project Report

This program mimics the game piano tiles for the iPhone. It starts by giving the user the instructions for the game and then prompting them to choose a board size and game mode. The board sizes are 4 x 4, 5 x 5, and 6 x 6. The modes of the game are the user presses a total of 25 tiles, 50 tiles, or plays in relax mode which will go infinitely until the user messes up. The user will press q if they want to quit and to press the tile the user clicks the mouse. If the user clicks the correct tile, the black tile in the bottom row of tiles, then the tile will move down and turn green. If the user misses the tile, then the game will end and the results will show how many tiles they got. A missed tile means that the user clicked one of the other white tiles in the bottom row. If the user clicks in any of the other rows, nothing happens. In relax mode, the user ends the game by missing the tile and their results will be shown.

The program works by creating a tile class and uses the gfx libraries. The tile class contains various methods that allow the game to be played. The constructor will initialize the board to white tiles and then select a random position in each row to contain the black tile. The board size is set via user selected input coming from the displayMenu function. The displayMenu function also sets the mode of the game to be played. The next thing that is called is the playGame function which will wait until the user takes action to do an action. If the user clicks, it will do one of two things. If the user clicks the right square, the game will update the board to reflect the tile being selected by turning it green, shifting all the rows downward, and then generating a new top row. This is done in the updateFunction method. If the piano tile is near the end of the board (only happens in the 25 tile and 50 tile mode), it needs to stop generating new rows, so a new method will be called that updates the rows to be just green space.

In order to determine what color tile to draw, the program utilizes a two dimensional vector that stores values of 0, 1, 2, and 3 that correspond to white, black, green, and green at the end of the game respectively. To draw the board, the function drawBoard will look through each element and see which color that spot on the board is supposed to be and draw the square in that color. There are four different for loops to increase redraw speed and minimize color change.

In order to ensure that the output was correct, we tested every possible situation and made necessary changes. The hardest part was getting all the text to align correctly, this took a lot of trial and error.
